'use strict'; 
// üëâ "use strict" ativa o "modo estrito" do JavaScript.
// Ele ajuda a capturar erros cedo (por exemplo, usar vari√°veis sem declarar)
// e impede alguns comportamentos confusos do JS. √â uma boa pr√°tica em projetos Node.

// =================================================================================================
// index.js ‚Äî Vers√£o comentada, passo a passo, para iniciantes
// =================================================================================================
//
// O que este arquivo faz?
// - Sobe um servidor HTTP com Fastify (um framework web r√°pido para Node.js).
// - Conecta no PostgreSQL usando o driver nativo (pg-native) para ter mais performance.
// - Cria/atualiza um √≠ndice e duas fun√ß√µes no banco (PL/pgSQL) para centralizar a l√≥gica de neg√≥cio.
// - Exp√µe duas rotas HTTP:
//     GET  /clientes/:id/extrato     -> retorna saldo/limite e √∫ltimas 10 transa√ß√µes de um cliente
//     POST /clientes/:id/transacoes  -> registra cr√©dito ("c") ou d√©bito ("d") na conta do cliente
//
// Filosofia do projeto:
// - O Node aqui √© uma ‚Äúcasca fina‚Äù: valida dados, chama UMA fun√ß√£o no banco e devolve a resposta.
// - A l√≥gica pesada (regras de saldo/limite, montar extrato) est√° no PostgreSQL.
//   Isso reduz idas/voltas de rede e melhora a consist√™ncia (o banco resolve tudo de forma at√¥mica).
// =================================================================================================


/* 1) Importa√ß√µes e setup b√°sico do servidor */
const fastify = require('fastify')({ logger: false });
// ^ Cria uma inst√¢ncia do servidor Fastify. Aqui desligamos o logger interno para ganhar desempenho.
//   (Se quiser ver logs em desenvolvimento, mude para { logger: true }).

const { native } = require('pg');
// ^ O pacote 'pg' √© o cliente de PostgreSQL para Node. 'native' tenta usar a vers√£o nativa (libpq),
//   que costuma ser mais r√°pida que a vers√£o JS pura em cen√°rios intensos.

const Pool = native.Pool;
// ^ Pool de conex√µes: mant√©m um conjunto de conex√µes abertas com o banco para reuso,
//   evitando o custo de abrir/fechar conex√£o a cada requisi√ß√£o.


/* 2) Configura√ß√£o do Pool de Conex√µes */
// Lemos a quantidade m√°xima de conex√µes do ambiente (ou usamos 30 por padr√£o).
const PG_MAX = Number(process.env.PG_MAX ?? 30);

const pool = new Pool({
    // DICA: se a aplica√ß√£o e o banco rodam na MESMA M√ÅQUINA, Unix Sockets podem ser mais r√°pidos
    // que TCP/IP. Ex.: host: '/var/run/postgresql'
    host: process.env.DB_HOST,         // endere√ßo do banco (ex.: 'localhost' ou IP/hostname)
    user: process.env.DB_USER,         // usu√°rio do banco
    password: process.env.DB_PASSWORD, // senha do usu√°rio
    database: process.env.DB_DATABASE, // nome do banco
    max: PG_MAX,                       // m√°ximo de conex√µes simult√¢neas no pool
    idleTimeoutMillis: 20000,          // ap√≥s 20s ocioso, a conex√£o pode ser reciclada
});

// Ajustes finos do servidor HTTP ap√≥s ele estar criado.
fastify.after(() => {
    // keepAliveTimeout controla quanto tempo a conex√£o HTTP fica aberta reaproveit√°vel.
    // Aumentar pode ajudar em cen√°rios de muitas requisi√ß√µes do mesmo cliente/load balancer.
    fastify.server.keepAliveTimeout = 60000; // 60 segundos
});


/* 3) SQL de inicializa√ß√£o (criado uma vez no start) */
// Por que fazer isso no start?
// - Garantimos que o √≠ndice e as fun√ß√µes do banco existem na inicializa√ß√£o da aplica√ß√£o.
// - Em ambientes imut√°veis/ephemerais (containers), isso poupa uma etapa manual.

const CREATE_INDEX_SQL = `
CREATE INDEX IF NOT EXISTS idx_account_id_id_desc ON transactions (account_id, id DESC);
`;
// ^ √çndice composto para acelerar consultas das √∫ltimas transa√ß√µes de um cliente.
//   "IF NOT EXISTS" evita erro caso o √≠ndice j√° exista.
//   Ordenar por id DESC ajuda quando buscamos "as mais recentes primeiro".

const CREATE_EXTRACT_FUNCTION_SQL = `
CREATE OR REPLACE FUNCTION get_extrato(p_account_id INT)
RETURNS JSON AS $$
DECLARE
    account_info JSON;
    last_transactions JSON;
BEGIN
    -- Busca saldo, limite e data do extrato para o cliente informado.
    SELECT json_build_object(
        'total', balance,
        'limite', account_limit,
        'data_extrato', NOW()
    )
    INTO account_info
    FROM accounts
    WHERE id = p_account_id;

    -- Se n√£o existe a conta, retorna NULL (a API traduzir√° isso em 404).
    IF account_info IS NULL THEN
        RETURN NULL;
    END IF;

    -- Monta um array JSON com as 10 √∫ltimas transa√ß√µes do cliente (ordenadas da mais recente).
    SELECT json_agg(t_info)
    INTO last_transactions
    FROM (
        SELECT json_build_object(
            'valor', amount,
            'tipo', type,
            'descricao', description,
            'realizada_em', created_at
        ) as t_info
        FROM transactions
        WHERE account_id = p_account_id
        ORDER BY id DESC
        LIMIT 10
    ) sub;

    -- Monta o JSON final do extrato: um objeto com "saldo" (outro objeto) e "ultimas_transacoes" (array).
    RETURN json_build_object(
        'saldo', account_info,
        'ultimas_transacoes', COALESCE(last_transactions, '[]'::json)
    );
END;
$$ LANGUAGE plpgsql;
`;
// ^ Fun√ß√£o PL/pgSQL que devolve TUDO pronto em JSON.
//   Vantagem: a aplica√ß√£o Node n√£o precisa juntar pedacinhos; s√≥ repassa o JSON retornado.


const CREATE_TRANSACTION_FUNCTION_SQL = `
CREATE OR REPLACE FUNCTION process_transaction(
    p_account_id INT,
    p_amount INT,
    p_type CHAR,
    p_description VARCHAR(10)
)
RETURNS JSON AS $$
DECLARE
    response JSON;
BEGIN
    -- ATEN√á√ÉO: toda a opera√ß√£o (atualizar saldo + inserir transa√ß√£o) √© feita de forma at√¥mica.
    -- Usamos CTEs (WITH ...) para encadear passos e s√≥ inserir se o UPDATE foi poss√≠vel.

    WITH updated_account AS (
        UPDATE accounts
        SET balance = balance + CASE WHEN p_type = 'c' THEN p_amount ELSE -p_amount END
        -- Regras:
        -- - Cr√©dito ('c'): soma no saldo.
        -- - D√©bito  ('d'): subtrai do saldo, mas s√≥ permite se N√ÉO estourar o limite.
        WHERE id = p_account_id AND (p_type = 'c' OR (balance - p_amount) >= -account_limit)
        RETURNING balance, account_limit
    ),
    inserted_transaction AS (
        -- S√≥ insere a transa√ß√£o se o UPDATE acima aconteceu (ou seja, se a conta existia
        -- e se n√£o estourou o limite em caso de d√©bito).
        INSERT INTO transactions (account_id, amount, type, description)
        SELECT p_account_id, p_amount, p_type, p_description
        FROM updated_account
        RETURNING 1
    )
    SELECT json_build_object('saldo', ua.balance, 'limite', ua.account_limit)
    INTO response
    FROM updated_account ua;

    -- Se response ficou NULL, nada foi atualizado (conta inexistente ou d√©bito inv√°lido).
    IF response IS NULL THEN
        RETURN '{"error": 1}'::json; -- A aplica√ß√£o interpretar√° isso como erro 422 (Unprocessable Entity).
    END IF;

    RETURN response; -- Caso ok, devolve saldo/limite atualizados.
END;
$$ LANGUAGE plpgsql;
`;
// ^ Essa fun√ß√£o concentra a regra de neg√≥cio de cr√©dito/d√©bito.
//   Como roda no banco, evitamos "corridas" de concorr√™ncia do lado do app
//   e simplificamos MUITO a API (uma chamada = uma decis√£o consistente).


/* 4) Defini√ß√£o de esquema de resposta (Fastify) */
// Por que ter um "schema"?
// - O Fastify pode pr√©-compilar um serializador de JSON super r√°pido (fast-json-stringify).
// - Em cen√°rios de alta carga, isso reduz trabalho do Garbage Collector e acelera respostas.
const transactionReplySchema = {
    schema: {
        response: {
            200: {
                type: 'object',
                properties: {
                    limite: { type: 'integer' },
                    saldo: { type: 'integer' },
                }
                // Dica: poder√≠amos marcar "required: ['limite','saldo']" para ser mais rigoroso.
            }
        }
    }
};


/* 5) Rota: GET /clientes/:id/extrato
   - Objetivo: retornar o extrato de um cliente (saldo/limite + √∫ltimas 10 transa√ß√µes).
   - Fluxo:
       1) Validar "id" (tem que ser inteiro de 1 a 5, conforme regra do desafio).
       2) Pegar uma conex√£o do pool.
       3) Executar a fun√ß√£o get_extrato($1) com prepared statement (name: 'get-extrato').
       4) Se vier NULL -> 404 (n√£o encontrado). Caso contr√°rio, retorna o JSON.
*/
fastify.get('/clientes/:id/extrato', async (request, reply) => {
    const id = Number(request.params.id); // params sempre s√£o strings -> convertemos para n√∫mero.

    // Valida√ß√µes simples e baratas para evitar chamadas desnecess√°rias ao banco.
    if (!Number.isInteger(id) || id <= 0 || id > 5) {
        // 404: no contexto do desafio, IDs v√°lidos s√£o 1..5. Fora disso, "n√£o existe".
        return reply.code(404).send();
    }

    let client;
    try {
        client = await pool.connect(); // pega uma conex√£o emprestada do pool

        // Usamos prepared statement (name/text/values):
        // - "name" identifica a consulta para o PostgreSQL poder reutilizar o plano de execu√ß√£o.
        // - "text" √© a SQL com placeholders ($1, $2 ...).
        // - "values" √© o array de par√¢metros. Isso evita SQL Injection.
        const result = await client.query({
            name: 'get-extrato',
            text: 'SELECT get_extrato($1) as extrato_json',
            values: [id]
        });

        const extrato = result.rows[0].extrato_json; // a fun√ß√£o j√° retorna JSON pronto
        if (extrato === null) {
            // Conta n√£o encontrada -> 404
            return reply.code(404).send();
        }
        
        // Sucesso -> devolvemos o JSON do pr√≥prio banco.
        return reply.send(extrato);
    } catch (e) {
        // Qualquer falha inesperada (erro de banco, etc.) -> 500 (erro do servidor)
        return reply.code(500).send();
    } finally {
        // MUITO IMPORTANTE: sempre liberar a conex√£o (sen√£o o pool esgota).
        if (client) client.release();
    }
});


/* 6) Rota: POST /clientes/:id/transacoes
   - Objetivo: registrar uma transa√ß√£o (cr√©dito 'c' ou d√©bito 'd') para um cliente.
   - Entrada esperada (JSON no body):
       {
         "valor": 123,           // inteiro > 0
         "tipo": "c" | "d",      // 'c' = cr√©dito, 'd' = d√©bito
         "descricao": "texto"    // string 1..10 caracteres
       }
   - Sa√≠da (200):
       { "limite": <int>, "saldo": <int> }
   - Poss√≠veis status:
       422 -> valida√ß√£o falhou OU d√©bito estouraria limite (regra de neg√≥cio)
       404 -> id fora do intervalo permitido (aqui usamos 422 para body inv√°lido e 404 para id inv√°lido na GET; na POST preferimos 422 para qualquer valida√ß√£o de entrada fora do contrato)
       500 -> erro inesperado (banco caiu, etc.)
*/
fastify.post('/clientes/:id/transacoes', transactionReplySchema, async (request, reply) => {
    const id = Number(request.params.id);
    const { valor, tipo, descricao } = request.body ?? {};
    // ^ Usamos "?? {}" para evitar erro caso body seja undefined.

    // Valida√ß√µes de entrada (baratas e r√°pidas, antes de tocar no banco).
    // Isso ajuda performance e retorna c√≥digos HTTP claros.
    if (
        !Number.isInteger(id) || id <= 0 || id > 5 ||         // id v√°lido (1..5)
        !Number.isInteger(valor) || valor <= 0 ||             // "valor" precisa ser inteiro e positivo
        (tipo !== 'c' && tipo !== 'd') ||                     // "tipo" s√≥ pode ser 'c' ou 'd'
        !descricao || typeof descricao !== 'string' ||        // "descricao" precisa existir e ser string
        descricao.length === 0 || descricao.length > 10       // tamanho 1..10
    ) {
        // 422 (Unprocessable Entity): o servidor entendeu a requisi√ß√£o, mas os dados n√£o atendem o contrato.
        return reply.code(422).send();
    }

    let client;
    try {
        client = await pool.connect();

        // Chamamos a fun√ß√£o de neg√≥cio no banco. Ela decide se o d√©bito √© permitido
        // e atualiza/inserir tudo de forma consistente (ou falha e retorna "error").
        const result = await client.query({
            name: 'process-transaction', // prepared statement para reuso do plano
            text: 'SELECT process_transaction($1, $2, $3, $4) as response_json',
            values: [id, valor, tipo, descricao]
        });

        const response = result.rows[0].response_json;

        if (response.error) {
            // Regra de neg√≥cio negou (ex.: d√©bito que estouraria o limite) -> 422
            return reply.code(422).send();
        }

        // Sucesso: devolvemos { limite, saldo } j√° no formato certo (bate com o schema).
        return reply.send(response);
    } catch (e) {
        // Falha inesperada -> 500
        return reply.code(500).send();
    } finally {
        // Sempre liberar a conex√£o!
        if (client) client.release();
    }
});


/* 7) Inicializa√ß√£o do servidor
   - Passos:
       a) Conectar no banco e garantir √≠ndice/fun√ß√µes (idempotente gra√ßas a IF NOT EXISTS / OR REPLACE).
       b) Iniciar o servidor HTTP escutando em 0.0.0.0 (todas interfaces) na porta PORT (ou 3000).
*/
const start = async () => {
    try {
        const client = await pool.connect();
        console.log("Conectado ao banco de dados, preparando fun√ß√µes e √≠ndices...");

        // Cria/atualiza os objetos necess√°rios no banco ANTES de aceitar requisi√ß√µes.
        await client.query(CREATE_INDEX_SQL);
        await client.query(CREATE_EXTRACT_FUNCTION_SQL);
        await client.query(CREATE_TRANSACTION_FUNCTION_SQL);

        client.release();
        console.log("Banco de dados pronto.");

        // L√™ a porta do ambiente (ex.: Render, Railway, Docker) ou usa 3000 localmente.
        const port = Number(process.env.PORT) || 3000;

        // host: '0.0.0.0' √© importante em containers para aceitar conex√µes externas.
        await fastify.listen({ port, host: '0.0.0.0' });
        console.log(`Servidor rodando na porta ${port}`);
    } catch (err) {
        // Se algo der MUITO errado na inicializa√ß√£o, mostramos o erro e encerramos o processo.
        console.error("Erro fatal ao iniciar a aplica√ß√£o:", err);
        process.exit(1);
    }
};

// Chama a fun√ß√£o de inicializa√ß√£o.
start();


// ================================================================================================
// DICAS FINAIS PARA INICIANTES
// --------------------------------------------------------------------------------
// 1) Sobre prepared statements:
//    - Aqui usamos a propriedade "name" nas queries. O PostgreSQL compila/planeja a consulta uma vez,
//      depois s√≥ reusa com novos par√¢metros. Isso reduz lat√™ncia em cen√°rios de alta repeti√ß√£o.
// 2) Sobre valida√ß√£o:
//    - Validar o mais cedo poss√≠vel evita chamadas desnecess√°rias ao banco e ajuda a devolver c√≥digos
//      HTTP corretos (422 para dados inv√°lidos conforme contrato; 404 quando o recurso n√£o existe).
// 3) Sobre JSON direto do banco:
//    - Retornar JSON pronto do PostgreSQL (com json_build_object/json_agg) simplifica a aplica√ß√£o e
//      garante um formato consistente, mesmo com concorr√™ncia alta.
// 4) Sobre pool.release():
//    - SEMPRE libere a conex√£o no "finally". Se esquecer, o pool vai esgotar e a API "congela".
// 5) Sobre erros 500:
//    - Use para falhas inesperadas (ex.: banco indispon√≠vel). Evite expor detalhes sens√≠veis no corpo.
// 6) Sobre √≠ndices:
//    - √çndices aceleram leituras, mas inser√ß√µes/updates podem ficar um pouco mais caros. Aqui a consulta
//      de "√∫ltimas transa√ß√µes" √© cr√≠tica, por isso o √≠ndice composto (account_id, id DESC).
// ================================================================================================
